#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from smart_home import FrezerDevice
from smart_home.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  FreezingMode getFreezingMode()')
    print('  void lowerFreezing()')
    print('  void increaseFreezing()')
    print('  i32 getPower()')
    print('  void setPower(i32 power)')
    print('  SwitchMode getCurrentMode()')
    print('  void turnOn()')
    print('  void turnOff()')
    print('  string getName()')
    print('  string getIdentifier()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = FrezerDevice.Client(protocol)
transport.open()

if cmd == 'getFreezingMode':
    if len(args) != 0:
        print('getFreezingMode requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFreezingMode())

elif cmd == 'lowerFreezing':
    if len(args) != 0:
        print('lowerFreezing requires 0 args')
        sys.exit(1)
    pp.pprint(client.lowerFreezing())

elif cmd == 'increaseFreezing':
    if len(args) != 0:
        print('increaseFreezing requires 0 args')
        sys.exit(1)
    pp.pprint(client.increaseFreezing())

elif cmd == 'getPower':
    if len(args) != 0:
        print('getPower requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPower())

elif cmd == 'setPower':
    if len(args) != 1:
        print('setPower requires 1 args')
        sys.exit(1)
    pp.pprint(client.setPower(eval(args[0]),))

elif cmd == 'getCurrentMode':
    if len(args) != 0:
        print('getCurrentMode requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCurrentMode())

elif cmd == 'turnOn':
    if len(args) != 0:
        print('turnOn requires 0 args')
        sys.exit(1)
    pp.pprint(client.turnOn())

elif cmd == 'turnOff':
    if len(args) != 0:
        print('turnOff requires 0 args')
        sys.exit(1)
    pp.pprint(client.turnOff())

elif cmd == 'getName':
    if len(args) != 0:
        print('getName requires 0 args')
        sys.exit(1)
    pp.pprint(client.getName())

elif cmd == 'getIdentifier':
    if len(args) != 0:
        print('getIdentifier requires 0 args')
        sys.exit(1)
    pp.pprint(client.getIdentifier())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
