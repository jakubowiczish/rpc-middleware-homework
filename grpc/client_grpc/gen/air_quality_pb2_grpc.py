# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import air_quality_pb2 as air__quality__pb2


class AirQualityServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeOnAirQuality = channel.unary_stream(
            '/AirQualityService/SubscribeOnAirQuality',
            request_serializer=air__quality__pb2.AirQualityRequest.SerializeToString,
            response_deserializer=air__quality__pb2.AirQualityInfo.FromString,
        )


class AirQualityServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SubscribeOnAirQuality(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AirQualityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SubscribeOnAirQuality': grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeOnAirQuality,
            request_deserializer=air__quality__pb2.AirQualityRequest.FromString,
            response_serializer=air__quality__pb2.AirQualityInfo.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'AirQualityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AirQualityService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SubscribeOnAirQuality(request,
                              target,
                              options=(),
                              channel_credentials=None,
                              call_credentials=None,
                              compression=None,
                              wait_for_ready=None,
                              timeout=None,
                              metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AirQualityService/SubscribeOnAirQuality',
                                              air__quality__pb2.AirQualityRequest.SerializeToString,
                                              air__quality__pb2.AirQualityInfo.FromString,
                                              options, channel_credentials,
                                              call_credentials, compression, wait_for_ready, timeout, metadata)
